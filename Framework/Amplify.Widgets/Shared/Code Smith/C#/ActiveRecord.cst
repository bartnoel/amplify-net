<%@ CodeTemplate src="TemplateBase.cs" Inherits="CodeSmith.Csla.TemplateBase" Language="C#" TargetLanguage="C#" Description="Generates a CSLA Editable Switchable Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Property Name="SourceDatabase" Optional="true" Type="SchemaExplorer.DatabaseSchema" Category="1. Context" Description="Database that the stored procedures should be based on." %>
<%@ Property Name="TablePrefixes" Optional="true" Type="CodeSmith.CustomProperties.StringCollection" Category="1. Context" Description="Database that the stored procedures should be based on." %>
<%@ Property Name="IgnoreTables" Optional="true" Type="CodeSmith.CustomProperties.StringCollection" Category="1. Context" Description="Database that the stored procedures should be based on." %>
<%@ Property Name="Associations" Optional="true" Type="CodeSmith.CustomProperties.StringCollection" Category="1. Context" Description="Database that the stored procedures should be based on." %>
<%@ Property Name="IsSerializable" Type="System.Boolean" Optional="true" Category="1. Object" Description="The namespace" %>
<%@ Property Name="Namespace" Type="System.String" Optional="true" Category="1. Object" Description="The namespace" %>

<%@ Property Name="ChildCollectionNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's Name. Used for the memeber variable and collection name." %>
<%@ Property Name="ChildPropertyNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's member variable name." %>

<%-- Generic Variables for code to use  --%>
<!-- #INCLUDE FILE="AutoGeneratedWarning.inc" -->
<% 
   int i = 0; 

    
   
	string[] TableNames = this.GetTableNames(SourceDatabase.Tables, TablePrefixes);
   if (this.Namespace != null && this.Namespace.Length > 0) { %>namespace <%= this.Namespace %>
<%=Indent(i++)%>{ 
<% } %> 
<!-- #INCLUDE FILE="UsingStatement.inc" -->

<%=Indent(i)%>public partial class <%= SourceDatabase.Name %>DataContext : DataContext 
<%=Indent(i)%>{
<%=Indent(++i)%>
<%=Indent(i)%>
<%=Indent(i)%>private static MappingSource mappingSource = new AttributeMappingSource();
<%=Indent(i)%>
<%=Indent(i)%>partial void OnCreate();
<%=Indent(i)%>
<%=Indent(i)%>public <%= SourceDatabase.Name %>DataContext() : 
<%=Indent(i)%>	base(global::<%= (this.Namespace != null && this.Namespace.Length >0) ? this.Namespace +"." :"" %>Properties.Settings.Default.<%= SourceDatabase.Name %>ConnectionString, mappingSource)
<%=Indent(i)%>{
<%=Indent(++i)%>this.OnCreate();
<%=Indent(--i)%>}
<%=Indent(i)%>
<%=Indent(i)%>public <%= SourceDatabase.Name %>DataContext(string connection)
<%=Indent(i)%>	:base(connection, mappingSource)
<%=Indent(i)%>{
<%=Indent(++i)%>this.OnCreate();
<%=Indent(--i)%>}
<%=Indent(i)%>
<%=Indent(i)%>public <%= SourceDatabase.Name %>DataContext(System.Data.IDbConnection connection)
<%=Indent(i)%>	:base(connection, mappingSource)
<%=Indent(i)%>{
<%=Indent(++i)%>this.OnCreate();
<%=Indent(--i)%>}
<%=Indent(i)%>
<%=Indent(i)%>public <%= SourceDatabase.Name %>DataContext(string connection, MappingSource mappingSource)
<%=Indent(i)%>	:base(connection, mappingSource)
<%=Indent(i)%>{
<%=Indent(++i)%>this.OnCreate();
<%=Indent(--i)%>}
<%=Indent(i)%>
<%=Indent(i)%>public <%= SourceDatabase.Name %>DataContext(System.Data.IDbConnection connection, MappingSource mappingSource)
<%=Indent(i)%>	:base(connection, mappingSource)
<%=Indent(i)%>{
<%=Indent(++i)%>this.OnCreate();
<%=Indent(--i)%>}
<%=Indent(i)%>
<% foreach(TableSchema table in SourceDatabase.Tables) {
	if(IgnoreTables != null && IgnoreTables.Contains(table.Name))
		continue;
	if(table.PrimaryKeys.Count == 1) 
		continue;
		
	if(table.Name == null || table.Name.Length == 0)
		continue;
		
	string ObjectName = this.GetObjectName(table.Name, TablePrefixes);
	
	
	
	%>
<%=Indent(i)%>public Table<<%=ObjectName%>> <%= this.Pluralize(ObjectName) %>
<%=Indent(i)%>{
<%=Indent(++i)%>get {
<%=Indent(++i)%>return this.GetTable<<%=ObjectName%>>();	
<%=Indent(--i)%>}
<%=Indent(--i)%>}
<%=Indent(i)%>
<%}//end table foreach%>


<%=Indent(--i)%>}


<% 
foreach(TableSchema table in SourceDatabase.Tables) {
	if(IgnoreTables != null && IgnoreTables.Contains(table.Name))
		continue;
	if(table.PrimaryKeys.Count == 1) 
		continue;
		
	if(table.Name == null || table.Name.Length == 0)
		continue;
	
	string ObjectName = this.GetObjectName(table.Name, TablePrefixes);
	string ListName = this.GetListName(ObjectName);
	ArrayList associations = new ArrayList();
	if(Associations != null) 
	{
		foreach(string association in Associations) {
			string plural = Inflector.Pluralize(ObjectName);
			if(association.StartsWith(ObjectName +"_") || association.EndsWith("_"+ObjectName) || association.StartsWith(plural+"_") || association.EndsWith("_"+plural) )
				associations.Add(new Association(association));
		}
	}
	

%>
<%=Indent(i)%>[Table(Name="<%= table.Name %>")<% if(!this.IsSerializable) {%>,Serializable()<%}%>] 
<%=Indent(i)%>public partial class <%= ObjectName %> : Base<<%=ObjectName%>>
<%=Indent(i)%>{
<%=Indent(++i)%>
<%=Indent(i)%>private static readonly string[] primaryKeys = new string[] {<% string keys = ""; foreach(ColumnSchema column in table.Columns) { if(column.IsPrimaryKeyMember){ keys +=  "\"" + column.Name + "\","; }}%><%= keys.TrimEnd(",".ToCharArray()) %>};
<%=Indent(i)%>private static readonly string[] properties = new string[] {<% string columns = ""; foreach(ColumnSchema column in table.Columns) { columns += "\"" + column.Name + "\",";  } %><%= columns.TrimEnd(",".ToCharArray()) %>};
<% 
	foreach(Association item in associations) { 
					string plural = Inflector.Pluralize(ObjectName);
					if(item.Owner == ObjectName || item.Owner == plural) {
						string type =  Inflector.Singularize(item.Child);
						string prop = (item.SingleChild) ?  type :   Inflector.Pluralize(type);
						string entity = (item.SingleChild) ? "EntityRef<" + type + ">"  : "EntitySet<"+ type +">";
						string var = Inflector.Camelize(prop);%>
<%=Indent(i)%>private <%= entity %> <%= var %>; 
<%} if(item.Owner != ObjectName && item.Owner != plural){ 
					string type =  Inflector.Singularize(item.Owner);
					string prop = (item.SingleOwner) ?  type :   Inflector.Pluralize(type);
					string entity = (item.SingleOwner) ? "EntityRef<" + type + ">"  : "EntitySet<"+ type +">";
					string var = Inflector.Camelize(prop);%>
<%=Indent(i)%>private <%= entity %> <%= var %>; 
<%} }%>
<%=Indent(i)%>
<%=Indent(i)%>public <%= ObjectName %>()
<%=Indent(i)%>	:base() 
<%=Indent(i)%>{
<%=Indent(i)%><%
				
				foreach(Association item in associations) { 
					string plural = Inflector.Pluralize(ObjectName);
					if(item.Owner == ObjectName || item.Owner == plural) {
						string type =  Inflector.Singularize(item.Child);
						string prop = (item.SingleChild) ?  type :   Inflector.Pluralize(type);
						string entity = (item.SingleChild) ? "EntityRef<" + type + ">"  : "EntitySet<"+ type +">";
						string var = Inflector.Camelize(prop);%>
<%=Indent(i)%>	this.<%= var %> = <%= (item.SingleChild)? "default("+ entity + ");" : "new " + entity + "(new Action<" + type + ">(this.attach" +prop +"), new Action<"+type+">(this.detach"+prop+"));" %><%} if(item.Owner != ObjectName && item.Owner != plural){ 
					string type =  Inflector.Singularize(item.Owner);
					string prop = (item.SingleOwner) ?  type :   Inflector.Pluralize(type);
					string entity = (item.SingleOwner) ? "EntityRef<" + type + ">"  : "EntitySet<"+ type +">";
					string var = Inflector.Camelize(prop);%>
<%=Indent(i)%>	this.<%= var %> = <%= (item.SingleOwner)? "default("+ entity + ");" : "new " + entity + "(new Action<" + type + ">(this.attach" +prop +"), new Action<"+type+">(this.detach"+prop+"));" %><%}}%>
<%=Indent(i)%>}
<%=Indent(i)%>
<%=Indent(i)%>#region properties 
<%=Indent(i)%>
<%=Indent(i)%>
<%=Indent(i)%>protected override IEnumerable<string> PrimaryKeys 
<%=Indent(i)%>{
<%=Indent(i)%>	get{ return primaryKeys; }
<%=Indent(i)%>}
<%=Indent(i)%>
<%=Indent(i)%>protected override IEnumerable<string> Properties
<%=Indent(i)%>{
<%=Indent(i)%>	get { return properties; }
<%=Indent(i)%>}

<% foreach(ColumnSchema column in table.Columns) {
			
			
			bool belongsTo = false;
			string owner = "";
			if(column.Name != "Id" && column.Name.Contains("Id")) 
			{
				owner = "";
				belongsTo = false;
				foreach(Association item in associations) {
					if(Inflector.Singularize(item.Owner)+"Id" == column.Name) {	
						belongsTo = true;
						owner = item.Owner;	
					}
				}
			}
			string type = column.SystemType.ToString();
			if(column.SystemType  == typeof(Guid) || column.SystemType == typeof(int))
			type += "?";
	%>
<%=Indent(i)%>[Column(<%if (column.IsPrimaryKeyMember){%>IsPrimaryKey=true<%} if(column.IsPrimaryKeyMember && !column.AllowDBNull) {%>,<%} if(!column.AllowDBNull){%>CanBeNull=false<%}%>)]
<%=Indent(i)%>public <%= type %> <%= column.Name %>
<%=Indent(i)%>{
<%=Indent(++i)%>get { return (<%= type %>)this.GetProperty("<%= column.Name %>"); }
<%=Indent(i)%>set { this.SetProperty("<%= column.Name %>", value<%if(belongsTo){ belongsTo = false;%>, 
<%=Indent(i)%>		delegate(Object objValue) { 
<%=Indent(i)%>			if(this.<%=Inflector.Camelize(owner)%>.HasLoadedOrAssignedValue)
<%=Indent(i)%>				throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
<%=Indent(i)%>		});
<%=Indent(i)%>}
<%=Indent(i)%><%}else {%>); }<%}%>
<%=Indent(--i)%>}
<%=Indent(i)%><%} // end for each for columns %>
<%=Indent(i)%><% foreach(Association item in associations) { 
					string plural = Inflector.Pluralize(ObjectName);
					if(item.Owner == ObjectName || item.Owner == plural) {
						string type =  Inflector.Singularize(item.Child);
						string prop = (item.SingleChild) ?  type :   Inflector.Pluralize(type);
						string entity = (item.SingleChild) ? "EntityRef<" + type + ">"  : "EntitySet<"+ type +">";
						string var = Inflector.Camelize(prop);
						%>
<%=Indent(i)%>[Association(Name="<%= item.Owner%>_<%=item.Child%>",Storage="<%=var%>",OtherKey="<%=Inflector.Singularize(item.Owner)%>Id")]
<%=Indent(i)%>public <%= (item.SingleChild) ? "EntityRef<" + type + "> " + type : "EntitySet<"+ type +"> " + Inflector.Pluralize(item.Child)  %> 
<%=Indent(i)%>{
<%=Indent(++i)%>get { return this.<%= var %><%= (item.SingleChild)? ".Entity" : "" %>; } 
<%=Indent(i)%>set { this.<%= var %><%= (item.SingleChild)? "= value" : ".Assign(value)" %>; }
<%=Indent(--i)%>}
<%=Indent(i)%><% if(!item.SingleChild) { %>
<%=Indent(i)%>private void attach<%=prop%>(<%=type%> entity)
<%=Indent(i)%>{
<%=Indent(i)%>	this.NotifyPropertyChanging("<%=prop%>");
<%=Indent(i)%>	entity.<%=item.Owner%> = this;
<%=Indent(i)%>}
<%=Indent(i)%>
<%=Indent(i)%>private void detach<%=prop%>(<%=type%> entity)
<%=Indent(i)%>{
<%=Indent(i)%>	this.NotifyPropertyChanging("<%=prop%>");
<%=Indent(i)%>	entity.<%=item.Owner%> = null;
<%=Indent(i)%>}<%}%>
<%=Indent(i)%><%} if(item.Owner != ObjectName && item.Owner != plural){ 
					string type =  Inflector.Singularize(item.Owner);
					string prop = (item.SingleOwner) ?  type :   Inflector.Pluralize(type);
					string entity = (item.SingleOwner) ? "EntityRef<" + type + ">"  : "EntitySet<"+ type +">";
					string var = Inflector.Camelize(prop);%>
<%=Indent(i)%>[Association(Name="<%= item.Owner %>_<%= item.Owner %>",Storage="<%=var%>",ThisKey="<%=Id")]
<%=Indent(i)%>public <%= (item.SingleOwner) ? type + " " + type : "EntitySet<"+ type +"> " + Inflector.Pluralize(item.Owner)  %> 
<%=Indent(i)%>{
<%=Indent(++i)%>get { return this.<%= var %><%= (item.SingleOwner)? ".Entity" : "" %>; } 
<%=Indent(i)%>set {
<%=Indent(i)%>			<%=type%> previousValue = this.<%=var%>.Entity;
<%=Indent(i)%>			if (((previousValue != value) 
<%=Indent(i)%>				|| (this.<%=var%>.HasLoadedOrAssignedValue == false)))
<%=Indent(i)%>			{
<%=Indent(i)%>				this.NotifyPropertyChanging("<%=prop%>");
<%=Indent(i)%>				if ((previousValue != null))
<%=Indent(i)%>				{
<%=Indent(i)%>					this.<%=var%>.Entity = null;
<%=Indent(i)%>					previousValue.<%=item.Child%>.Remove(this);
<%=Indent(i)%>				}
<%=Indent(i)%>				this.<%=var%>.Entity = null;
<%=Indent(i)%>				if(value != null)
<%=Indent(i)%>				{
<%=Indent(i)%>					value.<%= item.Child %>.Add(this);
<%=Indent(i)%>					this.<%=item.Owner%>Id = value.Id;
<%=Indent(i)%>				} else {
<%=Indent(i)%>					this.<%=item.Owner%>Id = default(Nullable<Guid>);
<%=Indent(i)%>				}
<%=Indent(i)%>				this.NotifyPropertyChanged("<%=prop%>");
<%=Indent(i)%>			}
<%=Indent(i)%>}
<%=Indent(--i)%>}
<%=Indent(i)%>
<%=Indent(i)%>
<%=Indent(i)%>
<%} //end else %>

<%}//end foreach %>
<%=Indent(i)%>#endregion
<%=Indent(i)%>
<%=Indent(i)%>#region static methods
<%=Indent(i)%>
<%=Indent(i)%>#endregion 
<%=Indent(--i)%>}

<%=Indent(i)%>[<% if(!this.IsSerializable) {%>Serializable()<%}%>]
<%=Indent(i)%>public partial class <%= ListName %> : ActsAsList<<%=ObjectName%>, <%=ListName%>>
<%=Indent(i)%>{
<%=Indent(++i)%>	
	
<%=Indent(--i)%>}

<% }// end tables foreach %>


<% if (this.Namespace != null && this.Namespace.Length > 0) { %>}<%}%>


