<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Amplify.Linq</name>
    </assembly>
    <members>
        <member name="M:Amplify.Linq.IEnumerableMixins.Collect``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Mixin. Collects all objects that matches the predicate.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="obj"></param>
            <param name="match">The <see cref="!:System.Predicate"/> match</param>
            <returns>returns an <see cref="!:System.Collections.Generic.IEnumerable&lt;&gt;"/> </returns>
        </member>
        <member name="M:Amplify.Linq.IEnumerableMixins.Map``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Mixin. Collects all objects that matches the predicate.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="obj"></param>
            <param name="match">The <see cref="!:System.Predicate"/> match</param>
            <returns>returns an <see cref="!:System.Collections.Generic.IEnumerable&lt;&gt;"/> </returns>
        </member>
        <member name="M:Amplify.Linq.IEnumerableMixins.ToHash``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Mixin, creates a hash object from the IEnumerable object with a string key
            of the index.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="obj">The object.</param>
            <returns>returns a <see cref="T:Amplify.Linq.Hash"/></returns>
        </member>
        <member name="M:Amplify.Linq.IEnumerableMixins.ToHash``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Mixin, creates a hash object from the IEnumerable object with a string key
            of the index.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="obj">The object.</param>
            <param name="func">Used to transform the key</param>
            <returns>returns a <see cref="T:Amplify.Linq.Hash"/></returns>
        </member>
        <member name="M:Amplify.Linq.IEnumerableMixins.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Amplify.Linq.StringMixins.Gsub(System.String,System.String,System.String)">
            <summary>
            Returns a string that has the replaced values that matched the pattern
            </summary>
            <param name="obj">String</param>
            <param name="pattern">The regular expressions pattern.</param>
            <param name="replacement">The replacement string.</param>
            <returns>A string with the replaced values.</returns>
        </member>
        <member name="M:Amplify.Linq.StringMixins.Gsub(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Returns a string that has the replaced values that matched the pattern
            </summary>
            <param name="obj">String</param>
            <param name="pattern">The regular expressions pattern.</param>
            <param name="replacement">The replacement string.</param>
            <param name="options">Regular expression options such as ignoring the case.</param>
            <returns>A string with the replaced values.</returns>
        </member>
        <member name="T:Amplify.Linq.Hash">
            <summary>
            A hash object, similiar to a String/Object Dictionary.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Amplify.Linq.Hash.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Func{System.Object,System.Object}[])" -->
        <member name="M:Amplify.Linq.Hash.#ctor(System.Func{System.Object,System.Object}[])">
            <summary>
            Constructor that allows a ruby like hash notation
            </summary>
            <param name="funcs">The value pairs: i.e. Name => &quot;value&quot;, Age => 10</param>
        </member>
        <member name="M:Amplify.Linq.Hash.#ctor(System.Collections.IDictionary)">
            <summary>
            Constructor that takes an IDictionary object and consumes it, using ToString() on each key.
            </summary>
            <param name="values">The <see cref="T:System.Collections.IDictionary"/> object</param>
        </member>
        <member name="M:Amplify.Linq.Hash.AddRange(System.Func{System.Object,System.Object}[])">
            <summary>
            Adds a range of value pairs to the hash.
            </summary>
            <param name="funcs">The value pairs: i.e. Name => &quot;value&quot;, Age => 10</param>
        </member>
        <member name="M:Amplify.Linq.Hash.AddRange(System.Collections.IDictionary)">
            <summary>
            Adds a rane of value pairs to the hash.
            </summary>
            <param name="values">The <see cref="T:System.Collections.IDictionary"/> object</param>
        </member>
        <member name="M:Amplify.Linq.Hash.Add(System.Func{System.Object,System.Object})">
            <summary>
            Adds value pairs to the hash
            </summary>
            <param name="funcs">The value pair: i.e. Name => &quot;value&quot;, Age => 10</param>
        </member>
        <member name="M:Amplify.Linq.Hash.New(System.Func{System.Object,System.Object}[])">
            <summary>
            Creates a new hash and allows a ruby like hash notation
            </summary>
            <param name="funcs">The value pairs: i.e. Name => &quot;value&quot;, Age => 10</param>
        </member>
        <member name="M:Amplify.Linq.Hash.New(System.Collections.IDictionary)">
            <summary>
            Creates a new hash from the values in the IDictionary object.
            </summary>
            <param name="values">The <see cref="T:System.Collections.IDictionary"/> object</param>
        </member>
        <member name="M:Amplify.Linq.Hash.New">
            <summary>
            Creates a new hash.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Amplify.Linq.Hash.Item(System.String)">
            <summary>
            Gets or sets a value by key.
            </summary>
            <param name="key">The string key.</param>
            <returns>The value of the key, or null if the value does not exist.</returns>
        </member>
    </members>
</doc>
